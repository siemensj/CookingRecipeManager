/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.recipeDSL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.recipeDSL.Manager;
import org.xtext.example.mydsl.recipeDSL.Recipe;
import org.xtext.example.mydsl.recipeDSL.RecipeDSLPackage;
import org.xtext.example.mydsl.recipeDSL.User;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Manager</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.recipeDSL.impl.ManagerImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.recipeDSL.impl.ManagerImpl#getUser <em>User</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.recipeDSL.impl.ManagerImpl#getRecipes <em>Recipes</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ManagerImpl extends MinimalEObjectImpl.Container implements Manager
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getUser() <em>User</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUser()
   * @generated
   * @ordered
   */
  protected EList<User> user;

  /**
   * The cached value of the '{@link #getRecipes() <em>Recipes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRecipes()
   * @generated
   * @ordered
   */
  protected EList<Recipe> recipes;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ManagerImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RecipeDSLPackage.Literals.MANAGER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RecipeDSLPackage.MANAGER__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<User> getUser()
  {
    if (user == null)
    {
      user = new EObjectContainmentEList<User>(User.class, this, RecipeDSLPackage.MANAGER__USER);
    }
    return user;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Recipe> getRecipes()
  {
    if (recipes == null)
    {
      recipes = new EObjectContainmentEList<Recipe>(Recipe.class, this, RecipeDSLPackage.MANAGER__RECIPES);
    }
    return recipes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RecipeDSLPackage.MANAGER__USER:
        return ((InternalEList<?>)getUser()).basicRemove(otherEnd, msgs);
      case RecipeDSLPackage.MANAGER__RECIPES:
        return ((InternalEList<?>)getRecipes()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RecipeDSLPackage.MANAGER__NAME:
        return getName();
      case RecipeDSLPackage.MANAGER__USER:
        return getUser();
      case RecipeDSLPackage.MANAGER__RECIPES:
        return getRecipes();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RecipeDSLPackage.MANAGER__NAME:
        setName((String)newValue);
        return;
      case RecipeDSLPackage.MANAGER__USER:
        getUser().clear();
        getUser().addAll((Collection<? extends User>)newValue);
        return;
      case RecipeDSLPackage.MANAGER__RECIPES:
        getRecipes().clear();
        getRecipes().addAll((Collection<? extends Recipe>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RecipeDSLPackage.MANAGER__NAME:
        setName(NAME_EDEFAULT);
        return;
      case RecipeDSLPackage.MANAGER__USER:
        getUser().clear();
        return;
      case RecipeDSLPackage.MANAGER__RECIPES:
        getRecipes().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RecipeDSLPackage.MANAGER__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case RecipeDSLPackage.MANAGER__USER:
        return user != null && !user.isEmpty();
      case RecipeDSLPackage.MANAGER__RECIPES:
        return recipes != null && !recipes.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ManagerImpl
