/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RecipeDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RecipeDSL.Model");
		private final Assignment cRecipesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRecipesRecipeParserRuleCall_0 = (RuleCall)cRecipesAssignment.eContents().get(0);
		
		//Model:
		//	recipes+=Recipe*;
		@Override public ParserRule getRule() { return rule; }
		
		//recipes+=Recipe*
		public Assignment getRecipesAssignment() { return cRecipesAssignment; }
		
		//Recipe
		public RuleCall getRecipesRecipeParserRuleCall_0() { return cRecipesRecipeParserRuleCall_0; }
	}
	public class RecipeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RecipeDSL.Recipe");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRecipeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cIngredientAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIngredientIngredientParserRuleCall_2_0 = (RuleCall)cIngredientAssignment_2.eContents().get(0);
		private final Assignment cDeviceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeviceDeviceParserRuleCall_3_0 = (RuleCall)cDeviceAssignment_3.eContents().get(0);
		private final Assignment cCookingAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCookingCookingParserRuleCall_4_0 = (RuleCall)cCookingAssignment_4.eContents().get(0);
		
		//Recipe:
		//	"Recipe" name=ID
		//	ingredient+=Ingredient+
		//	device+=Device+
		//	cooking+=Cooking+;
		@Override public ParserRule getRule() { return rule; }
		
		//"Recipe" name=ID ingredient+=Ingredient+ device+=Device+ cooking+=Cooking+
		public Group getGroup() { return cGroup; }
		
		//"Recipe"
		public Keyword getRecipeKeyword_0() { return cRecipeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//ingredient+=Ingredient+
		public Assignment getIngredientAssignment_2() { return cIngredientAssignment_2; }
		
		//Ingredient
		public RuleCall getIngredientIngredientParserRuleCall_2_0() { return cIngredientIngredientParserRuleCall_2_0; }
		
		//device+=Device+
		public Assignment getDeviceAssignment_3() { return cDeviceAssignment_3; }
		
		//Device
		public RuleCall getDeviceDeviceParserRuleCall_3_0() { return cDeviceDeviceParserRuleCall_3_0; }
		
		//cooking+=Cooking+
		public Assignment getCookingAssignment_4() { return cCookingAssignment_4; }
		
		//Cooking
		public RuleCall getCookingCookingParserRuleCall_4_0() { return cCookingCookingParserRuleCall_4_0; }
	}
	public class IngredientElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RecipeDSL.Ingredient");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIngredientKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cAmountKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMeasureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMeasureMeasureParserRuleCall_3_0 = (RuleCall)cMeasureAssignment_3.eContents().get(0);
		
		//Ingredient:
		//	'Ingredient' name=ID "amount" measure=Measure;
		@Override public ParserRule getRule() { return rule; }
		
		//'Ingredient' name=ID "amount" measure=Measure
		public Group getGroup() { return cGroup; }
		
		//'Ingredient'
		public Keyword getIngredientKeyword_0() { return cIngredientKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"amount"
		public Keyword getAmountKeyword_2() { return cAmountKeyword_2; }
		
		//measure=Measure
		public Assignment getMeasureAssignment_3() { return cMeasureAssignment_3; }
		
		//Measure
		public RuleCall getMeasureMeasureParserRuleCall_3_0() { return cMeasureMeasureParserRuleCall_3_0; }
	}
	public class MeasureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RecipeDSL.Measure");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWeightParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCountParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Measure:
		//	Weight | Count;
		@Override public ParserRule getRule() { return rule; }
		
		//Weight | Count
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Weight
		public RuleCall getWeightParserRuleCall_0() { return cWeightParserRuleCall_0; }
		
		//Count
		public RuleCall getCountParserRuleCall_1() { return cCountParserRuleCall_1; }
	}
	public class WeightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RecipeDSL.Weight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWeightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGrammsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGrammsSTRINGTerminalRuleCall_1_0 = (RuleCall)cGrammsAssignment_1.eContents().get(0);
		
		//Weight:
		//	"Weight" gramms=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"Weight" gramms=STRING
		public Group getGroup() { return cGroup; }
		
		//"Weight"
		public Keyword getWeightKeyword_0() { return cWeightKeyword_0; }
		
		//gramms=STRING
		public Assignment getGrammsAssignment_1() { return cGrammsAssignment_1; }
		
		//STRING
		public RuleCall getGrammsSTRINGTerminalRuleCall_1_0() { return cGrammsSTRINGTerminalRuleCall_1_0; }
	}
	public class CountElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RecipeDSL.Count");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCountKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCountAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCountINTTerminalRuleCall_1_0 = (RuleCall)cCountAssignment_1.eContents().get(0);
		
		//Count:
		//	"Count" count=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//"Count" count=INT
		public Group getGroup() { return cGroup; }
		
		//"Count"
		public Keyword getCountKeyword_0() { return cCountKeyword_0; }
		
		//count=INT
		public Assignment getCountAssignment_1() { return cCountAssignment_1; }
		
		//INT
		public RuleCall getCountINTTerminalRuleCall_1_0() { return cCountINTTerminalRuleCall_1_0; }
	}
	public class DeviceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RecipeDSL.Device");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeviceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Device:
		//	"Device" name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//"Device" name=ID
		public Group getGroup() { return cGroup; }
		
		//"Device"
		public Keyword getDeviceKeyword_0() { return cDeviceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class CookingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RecipeDSL.Cooking");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCookingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOrderAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOrderIDTerminalRuleCall_1_0 = (RuleCall)cOrderAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTimeAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTimeTimeParserRuleCall_2_0_0 = (RuleCall)cTimeAssignment_2_0.eContents().get(0);
		private final Assignment cStepAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStepStepParserRuleCall_2_1_0 = (RuleCall)cStepAssignment_2_1.eContents().get(0);
		
		//Cooking:
		//	"Cooking" order=ID (time=Time step+=Step)*;
		@Override public ParserRule getRule() { return rule; }
		
		//"Cooking" order=ID (time=Time step+=Step)*
		public Group getGroup() { return cGroup; }
		
		//"Cooking"
		public Keyword getCookingKeyword_0() { return cCookingKeyword_0; }
		
		//order=ID
		public Assignment getOrderAssignment_1() { return cOrderAssignment_1; }
		
		//ID
		public RuleCall getOrderIDTerminalRuleCall_1_0() { return cOrderIDTerminalRuleCall_1_0; }
		
		//(time=Time step+=Step)*
		public Group getGroup_2() { return cGroup_2; }
		
		//time=Time
		public Assignment getTimeAssignment_2_0() { return cTimeAssignment_2_0; }
		
		//Time
		public RuleCall getTimeTimeParserRuleCall_2_0_0() { return cTimeTimeParserRuleCall_2_0_0; }
		
		//step+=Step
		public Assignment getStepAssignment_2_1() { return cStepAssignment_2_1; }
		
		//Step
		public RuleCall getStepStepParserRuleCall_2_1_0() { return cStepStepParserRuleCall_2_1_0; }
	}
	public class TimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RecipeDSL.Time");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTimeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimeSTRINGTerminalRuleCall_1_0 = (RuleCall)cTimeAssignment_1.eContents().get(0);
		
		//Time:
		//	"For" time=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"For" time=STRING
		public Group getGroup() { return cGroup; }
		
		//"For"
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//time=STRING
		public Assignment getTimeAssignment_1() { return cTimeAssignment_1; }
		
		//STRING
		public RuleCall getTimeSTRINGTerminalRuleCall_1_0() { return cTimeSTRINGTerminalRuleCall_1_0; }
	}
	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RecipeDSL.Step");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDDeviceParserRuleCall_1_0 = (RuleCall)cDAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIIngredientParserRuleCall_3_0 = (RuleCall)cIAssignment_3.eContents().get(0);
		
		//Step:
		//	"Use" d=Device "with" i=Ingredient;
		@Override public ParserRule getRule() { return rule; }
		
		//"Use" d=Device "with" i=Ingredient
		public Group getGroup() { return cGroup; }
		
		//"Use"
		public Keyword getUseKeyword_0() { return cUseKeyword_0; }
		
		//d=Device
		public Assignment getDAssignment_1() { return cDAssignment_1; }
		
		//Device
		public RuleCall getDDeviceParserRuleCall_1_0() { return cDDeviceParserRuleCall_1_0; }
		
		//"with"
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }
		
		//i=Ingredient
		public Assignment getIAssignment_3() { return cIAssignment_3; }
		
		//Ingredient
		public RuleCall getIIngredientParserRuleCall_3_0() { return cIIngredientParserRuleCall_3_0; }
	}
	
	
	private final ModelElements pModel;
	private final RecipeElements pRecipe;
	private final IngredientElements pIngredient;
	private final MeasureElements pMeasure;
	private final WeightElements pWeight;
	private final CountElements pCount;
	private final DeviceElements pDevice;
	private final CookingElements pCooking;
	private final TimeElements pTime;
	private final StepElements pStep;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RecipeDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pRecipe = new RecipeElements();
		this.pIngredient = new IngredientElements();
		this.pMeasure = new MeasureElements();
		this.pWeight = new WeightElements();
		this.pCount = new CountElements();
		this.pDevice = new DeviceElements();
		this.pCooking = new CookingElements();
		this.pTime = new TimeElements();
		this.pStep = new StepElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.RecipeDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	recipes+=Recipe*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Recipe:
	//	"Recipe" name=ID
	//	ingredient+=Ingredient+
	//	device+=Device+
	//	cooking+=Cooking+;
	public RecipeElements getRecipeAccess() {
		return pRecipe;
	}
	
	public ParserRule getRecipeRule() {
		return getRecipeAccess().getRule();
	}
	
	//Ingredient:
	//	'Ingredient' name=ID "amount" measure=Measure;
	public IngredientElements getIngredientAccess() {
		return pIngredient;
	}
	
	public ParserRule getIngredientRule() {
		return getIngredientAccess().getRule();
	}
	
	//Measure:
	//	Weight | Count;
	public MeasureElements getMeasureAccess() {
		return pMeasure;
	}
	
	public ParserRule getMeasureRule() {
		return getMeasureAccess().getRule();
	}
	
	//Weight:
	//	"Weight" gramms=STRING;
	public WeightElements getWeightAccess() {
		return pWeight;
	}
	
	public ParserRule getWeightRule() {
		return getWeightAccess().getRule();
	}
	
	//Count:
	//	"Count" count=INT;
	public CountElements getCountAccess() {
		return pCount;
	}
	
	public ParserRule getCountRule() {
		return getCountAccess().getRule();
	}
	
	//Device:
	//	"Device" name=ID;
	public DeviceElements getDeviceAccess() {
		return pDevice;
	}
	
	public ParserRule getDeviceRule() {
		return getDeviceAccess().getRule();
	}
	
	//Cooking:
	//	"Cooking" order=ID (time=Time step+=Step)*;
	public CookingElements getCookingAccess() {
		return pCooking;
	}
	
	public ParserRule getCookingRule() {
		return getCookingAccess().getRule();
	}
	
	//Time:
	//	"For" time=STRING;
	public TimeElements getTimeAccess() {
		return pTime;
	}
	
	public ParserRule getTimeRule() {
		return getTimeAccess().getRule();
	}
	
	//Step:
	//	"Use" d=Device "with" i=Ingredient;
	public StepElements getStepAccess() {
		return pStep;
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
