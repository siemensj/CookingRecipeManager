/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.recipeDSL.Cooking;
import org.xtext.example.mydsl.recipeDSL.Count;
import org.xtext.example.mydsl.recipeDSL.Device;
import org.xtext.example.mydsl.recipeDSL.Ingredient;
import org.xtext.example.mydsl.recipeDSL.Level;
import org.xtext.example.mydsl.recipeDSL.Manager;
import org.xtext.example.mydsl.recipeDSL.Model;
import org.xtext.example.mydsl.recipeDSL.Recipe;
import org.xtext.example.mydsl.recipeDSL.RecipeDSLPackage;
import org.xtext.example.mydsl.recipeDSL.Step;
import org.xtext.example.mydsl.recipeDSL.Time;
import org.xtext.example.mydsl.recipeDSL.User;
import org.xtext.example.mydsl.recipeDSL.Weight;
import org.xtext.example.mydsl.services.RecipeDSLGrammarAccess;

@SuppressWarnings("all")
public class RecipeDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RecipeDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RecipeDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RecipeDSLPackage.COOKING:
				sequence_Cooking(context, (Cooking) semanticObject); 
				return; 
			case RecipeDSLPackage.COUNT:
				sequence_Count(context, (Count) semanticObject); 
				return; 
			case RecipeDSLPackage.DEVICE:
				sequence_Device(context, (Device) semanticObject); 
				return; 
			case RecipeDSLPackage.INGREDIENT:
				sequence_Ingredient(context, (Ingredient) semanticObject); 
				return; 
			case RecipeDSLPackage.LEVEL:
				sequence_Level(context, (Level) semanticObject); 
				return; 
			case RecipeDSLPackage.MANAGER:
				sequence_Manager(context, (Manager) semanticObject); 
				return; 
			case RecipeDSLPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case RecipeDSLPackage.RECIPE:
				sequence_Recipe(context, (Recipe) semanticObject); 
				return; 
			case RecipeDSLPackage.STEP:
				sequence_Step(context, (Step) semanticObject); 
				return; 
			case RecipeDSLPackage.TIME:
				sequence_Time(context, (Time) semanticObject); 
				return; 
			case RecipeDSLPackage.USER:
				sequence_User(context, (User) semanticObject); 
				return; 
			case RecipeDSLPackage.WEIGHT:
				sequence_Weight(context, (Weight) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Cooking returns Cooking
	 *
	 * Constraint:
	 *     (s+=INT time+=Time step+=Step)
	 */
	protected void sequence_Cooking(ISerializationContext context, Cooking semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Count returns Count
	 *
	 * Constraint:
	 *     count+=INT
	 */
	protected void sequence_Count(ISerializationContext context, Count semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Device returns Device
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Device(ISerializationContext context, Device semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RecipeDSLPackage.Literals.DEVICE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RecipeDSLPackage.Literals.DEVICE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeviceAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Ingredient returns Ingredient
	 *
	 * Constraint:
	 *     (name=ID (measure+=Weight | measure+=Count))
	 */
	protected void sequence_Ingredient(ISerializationContext context, Ingredient semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Level returns Level
	 *
	 * Constraint:
	 *     (rating+='*' | rating+='**' | rating+='***' | rating+='****' | rating+='*****')
	 */
	protected void sequence_Level(ISerializationContext context, Level semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Manager returns Manager
	 *
	 * Constraint:
	 *     (name=ID user+=User user+=User* recipes+=Recipe*)
	 */
	protected void sequence_Manager(ISerializationContext context, Manager semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     mgr=Manager
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RecipeDSLPackage.Literals.MODEL__MGR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RecipeDSLPackage.Literals.MODEL__MGR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModelAccess().getMgrManagerParserRuleCall_0(), semanticObject.getMgr());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Recipe returns Recipe
	 *
	 * Constraint:
	 *     (name=ID level+=Level ingredient+=Ingredient+ device+=Device+ cooking+=Cooking+)
	 */
	protected void sequence_Recipe(ISerializationContext context, Recipe semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Step returns Step
	 *
	 * Constraint:
	 *     (dev+=[Device|ID] dev2+=[Device|ID]* ing+=[Ingredient|ID] ing2+=[Ingredient|ID]*)
	 */
	protected void sequence_Step(ISerializationContext context, Step semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Time returns Time
	 *
	 * Constraint:
	 *     time=INT
	 */
	protected void sequence_Time(ISerializationContext context, Time semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RecipeDSLPackage.Literals.TIME__TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RecipeDSLPackage.Literals.TIME__TIME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTimeAccess().getTimeINTTerminalRuleCall_1_0(), semanticObject.getTime());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     User returns User
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_User(ISerializationContext context, User semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RecipeDSLPackage.Literals.USER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RecipeDSLPackage.Literals.USER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUserAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Weight returns Weight
	 *
	 * Constraint:
	 *     weight+=EFloat
	 */
	protected void sequence_Weight(ISerializationContext context, Weight semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
