/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalRecipeDSLParser;
import org.xtext.example.mydsl.services.RecipeDSLGrammarAccess;

public class RecipeDSLParser extends AbstractContentAssistParser {

	@Inject
	private RecipeDSLGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalRecipeDSLParser createParser() {
		InternalRecipeDSLParser result = new InternalRecipeDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getMeasureAccess().getAlternatives(), "rule__Measure__Alternatives");
					put(grammarAccess.getRecipeAccess().getGroup(), "rule__Recipe__Group__0");
					put(grammarAccess.getIngredientAccess().getGroup(), "rule__Ingredient__Group__0");
					put(grammarAccess.getWeightAccess().getGroup(), "rule__Weight__Group__0");
					put(grammarAccess.getCountAccess().getGroup(), "rule__Count__Group__0");
					put(grammarAccess.getDeviceAccess().getGroup(), "rule__Device__Group__0");
					put(grammarAccess.getCookingAccess().getGroup(), "rule__Cooking__Group__0");
					put(grammarAccess.getCookingAccess().getGroup_2(), "rule__Cooking__Group_2__0");
					put(grammarAccess.getTimeAccess().getGroup(), "rule__Time__Group__0");
					put(grammarAccess.getStepAccess().getGroup(), "rule__Step__Group__0");
					put(grammarAccess.getModelAccess().getRecipesAssignment(), "rule__Model__RecipesAssignment");
					put(grammarAccess.getRecipeAccess().getNameAssignment_1(), "rule__Recipe__NameAssignment_1");
					put(grammarAccess.getRecipeAccess().getIngredientAssignment_2(), "rule__Recipe__IngredientAssignment_2");
					put(grammarAccess.getRecipeAccess().getDeviceAssignment_3(), "rule__Recipe__DeviceAssignment_3");
					put(grammarAccess.getRecipeAccess().getCookingAssignment_4(), "rule__Recipe__CookingAssignment_4");
					put(grammarAccess.getIngredientAccess().getNameAssignment_1(), "rule__Ingredient__NameAssignment_1");
					put(grammarAccess.getIngredientAccess().getMeasureAssignment_3(), "rule__Ingredient__MeasureAssignment_3");
					put(grammarAccess.getWeightAccess().getGrammsAssignment_1(), "rule__Weight__GrammsAssignment_1");
					put(grammarAccess.getCountAccess().getCountAssignment_1(), "rule__Count__CountAssignment_1");
					put(grammarAccess.getDeviceAccess().getNameAssignment_1(), "rule__Device__NameAssignment_1");
					put(grammarAccess.getCookingAccess().getOrderAssignment_1(), "rule__Cooking__OrderAssignment_1");
					put(grammarAccess.getCookingAccess().getTimeAssignment_2_0(), "rule__Cooking__TimeAssignment_2_0");
					put(grammarAccess.getCookingAccess().getStepAssignment_2_1(), "rule__Cooking__StepAssignment_2_1");
					put(grammarAccess.getTimeAccess().getTimeAssignment_1(), "rule__Time__TimeAssignment_1");
					put(grammarAccess.getStepAccess().getDAssignment_1(), "rule__Step__DAssignment_1");
					put(grammarAccess.getStepAccess().getIAssignment_3(), "rule__Step__IAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RecipeDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RecipeDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
